window = {
	name = "decisions_view"
	parentanchor = top|right
	layer = windows_layer
	movable = no

	oncreate = "[BindTabsContext]"
	oncreate = "[PdxGuiTabs.ListenFor( 'decision_tabs' )]"
	oncreate = "[PdxGuiTabs.AddTab( 'decision' )]"

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[PdxGuiTabs.RemoveTab( 'great_projects' )]"
		on_start = "[PdxGuiTabs.AddTabIf( 'great_projects', Or(Not(IsDataModelEmpty(DecisionsView.GetAvailableGreatProjectItems)), Or(Not(IsDataModelEmpty(DecisionsView.GetPlannedGreatProjectItems)), Not(IsDataModelEmpty(DecisionsView.GetOngoingGreatProjectItems)))))]"

		on_start = "[PdxGuiTabs.SetTabByKey( DecisionsView.SelectedTab )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		margin_top = 30
		margin_bottom = 25
		margin_right = 13

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						datacontext = "[GetPlayer]"
						text = "DECISIONS_VIEW_TITLE"
					}

					blockoverride "button_close"
					{
						onclick = "[DecisionsView.Close]"
						onclick = "[CloseGameView( 'great_project' )]"
					}
				}

				hbox_tab_buttons = {
					name = "decision_tabs"

					blockoverride "tab_name"
					{
						text = "[PdxGuiTabItem.LocalizeTab( 'decision_tab' )]"
					}
				}

				### DECISIONS ###
				scrollbox = {
					name = "decision_scrollarea"
					widgetid = "decisions_panel_decisions_scrollarea"  #lesson_china_decisions_open uses this
					visible = "[PdxGuiTabs.IsTabSet( 'decision' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					background = {
						texture = "gfx/interface/skinned/illustrations/decisions.dds"
						fittype = end
						alpha = 0.4

						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "scrollbox_content"
					{
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							name = "decision_groups_container"
							spacing = 2

							layoutpolicy_horizontal = expanding

							datamodel = "[DecisionsView.GetDecisionGroupItems]"
							item = {
								vbox_decision_group_foldout = {}
							}
						}
					}
					blockoverride "scrollbox_expand" {
						expand = {}
					}
				}

				### GREAT PROJECTS ###
				scrollbox = {
					name = "tab_projects"
					widgetid = "tab_projects"
					visible = "[PdxGuiTabs.IsTabSet( 'great_projects' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					
					state = {
						name = _show
						on_start = "[DecisionsView.SetGreatProjectsTabActive( '(bool)yes' )]"
					}

					state = {
						name = _hide
						on_start = "[DecisionsView.SetGreatProjectsTabActive( '(bool)no' )]"
					}

					blockoverride "scrollbox_content"
					{
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 5

							# EMPTY PROJECT LIST
							vbox = {
								visible = "[And( IsDataModelEmpty( DecisionsView.GetAvailableGreatProjectItems ), And( IsDataModelEmpty( DecisionsView.GetPlannedGreatProjectItems), IsDataModelEmpty( DecisionsView.GetOngoingGreatProjectItems) ) )]"
								layoutpolicy_horizontal = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "DECISIONS_VIEW_EMPTY_PROJECTS"
									align = hcenter|nobaseline
								}
							}

							# PROJECTS YOU CAN FUND (planned, need contributions)
							text_label_center = {
								visible = "[Not( IsDataModelEmpty( DecisionsView.GetPlannedGreatProjectItems))]"
								layoutpolicy_horizontal = expanding

								text = "DECISIONS_VIEW_PLANNED_PROJECTS"
							}

							vbox = {
								datamodel = "[DecisionsView.GetPlannedGreatProjectItems]"
								visible = "[Not( IsDataModelEmpty( DecisionsView.GetPlannedGreatProjectItems))]"
								layoutpolicy_horizontal = expanding
								margin_bottom = 15
								spacing = 10

								item = {
									button_project_item = {
										datacontext = "[GreatProjectItem.GetProject]"
										layoutpolicy_horizontal = expanding

										blockoverride "can_contribute_text_visible"
										{
											visible = "[GreatProject.CanPlayerContributeToProject]" # "[DecisionView.CanPlayerContributeToProject( GreatProject.Self )]"
										}
									}
								}
							}

							# PROJECTS YOU CAN FUND (ongoing)
							text_label_center = {
								visible = "[Not( IsDataModelEmpty( DecisionsView.GetOngoingGreatProjectItems))]"
								layoutpolicy_horizontal = expanding

								text = "DECISIONS_VIEW_ONGOING_PROJECTS"

							}

							vbox = {
								datamodel = "[DecisionsView.GetOngoingGreatProjectItems]"
								visible = "[Not( IsDataModelEmpty( DecisionsView.GetOngoingGreatProjectItems))]"
								layoutpolicy_horizontal = expanding
								margin_bottom = 15
								spacing = 10

								item = {
									button_project_item = {
										datacontext = "[GreatProjectItem.GetProject]"
										layoutpolicy_horizontal = expanding

										blockoverride "can_contribute_text_visible"
										{
											visible = "[GreatProject.CanPlayerContributeToProject]" # "[DecisionView.CanPlayerContributeToProject( GreatProject.Self )]"
										}

									}
								}
							}

							# PROJECTS YOU CAN START
							text_label_center = {
								visible = "[Not( IsDataModelEmpty( DecisionsView.GetAvailableGreatProjectItems))]"
								layoutpolicy_horizontal = expanding

								text = "AVAILABLE_DECISIONS_VIEW_PROJECTS"
							}

							vbox = {
								datamodel = "[DecisionsView.GetAvailableGreatProjectItems]"
								visible = "[Not( IsDataModelEmpty( DecisionsView.GetAvailableGreatProjectItems))]"
								layoutpolicy_horizontal = expanding
								margin_bottom = 15
								spacing = 10

								item = {
									button_available_project_item = {
										layoutpolicy_horizontal = expanding

										blockoverride "size_illustration"
										{
											position = { -2 0 }
											size = { 250 48 }
										}
									}
								}
							}



							expand = {}
						}
					}
				}

				expand = {}
			}
		}
	}
}

types Decisions
{
	type vbox_decision_group_foldout = vbox {
		datacontext = "[DecisionGroupItem.GetType]"
		spacing = 4

		layoutpolicy_horizontal = expanding

		oncreate = "[BindFoldOutContext]"
		oncreate = "[PdxGuiFoldOut.Unfold]"

		button_expandable_toggle_field = {
			blockoverride "text"
			{
				text = "[DecisionGroupItem.GetGroupTitle]"
			}
		}

		vbox = {
			visible = "[PdxGuiFoldOut.IsUnfolded]"

			layoutpolicy_horizontal = expanding

			fixedgridbox = {
				name = "decisions_in_group"
				datamodel = "[DecisionGroupItem.GetDecisions]"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				addcolumn = 527
				addrow = "[Select_float( DecisionGroupType.HasTag('extra_big_button'), '(float)70.0', Select_float( DecisionGroupType.HasTag('big_button'), '(float)60.0', '(float)50.0' ))]"

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding

						button_decision_entry_cached = {
							datacontext = "[DecisionsViewItem.GetDecision]"

							layoutpolicy_horizontal = expanding

							blockoverride "button_size" {
								minimumsize = "[Select_CVector2f( DecisionGroupType.HasTag('extra_big_button'), '(CVector2f)527,65', Select_CVector2f( DecisionGroupType.HasTag('big_button'), '(CVector2f)527,55', '(CVector2f)527,45' ) )]"
							}

							blockoverride "size_illustration" {
								minimumsize = "[Select_CVector2f( DecisionGroupType.HasTag('extra_big_button'), '(CVector2f)527,65', Select_CVector2f( DecisionGroupType.HasTag('big_button'), '(CVector2f)527,55', '(CVector2f)527,45' ) )]"
							}

							blockoverride "decision_texture_icon" {
								texture = "[DecisionsViewItem.GetDecisionPicture]"
							}

							blockoverride "decision_texture_highlight" {
								texture = "[DecisionsViewItem.GetDecisionPicture]"
							}

							onclick = "[DecisionsViewItem.OnSelect]"
							onclick = "[PdxGuiTriggerAllAnimations('decisions_detail_refresh')]"
							down = "[DecisionsViewItem.IsSelected]"
						}
						expand = {}
					}
				}
			}
		}
	}

	type button_decision_entry_cached = button_decision_entry {
		blockoverride "illustration_possible_check" {
			visible = "[DecisionsViewItem.IsPossibleForPlayer]"
		}
		blockoverride "illustration_not_possible_check" {
			visible = "[Not(DecisionsViewItem.IsPossibleForPlayer)]"
		}
		blockoverride "title_possible_check" {
			visible = "[DecisionsViewItem.IsPossibleForPlayer]"
		}
		blockoverride "title2_not_possible_check" {
			visible = "[Not(DecisionsViewItem.IsPossibleForPlayer)]"
		}
		blockoverride "title_not_possible_check" {
			visible = "[Not(DecisionsViewItem.IsPossibleForPlayer)]"
		}
	}

	type button_decision_entry = button_standard {
		block "button_size" {
			size = { 300 45 }
		}

		tooltipwidget = {
			decision_tooltip = {}
		}

		widget = {
			name = "cram_study_tutorial_highlight"
			size = { 100% 100% }
			visible = "[ObjectsEqual( GetDecision('tgp_china_study_confucian_classics_decision'),  Decision.Self)]"
		}

		widget = {
			name = "renounce_governorship_decision_tutorial_highlight"
			size = { 100% 100% }
			visible = "[ObjectsEqual( GetDecision('renounce_governorship_decision'),  Decision.Self)]"
		}

		widget = {
			name = "tgp_japan_assert_regional_dominion_government_decision_tutorial_highlight"
			size = { 100% 100% }
			visible = "[ObjectsEqual( GetDecision('tgp_japan_assert_regional_dominion_government_decision'),  Decision.Self)]"
		}

		widget = {
			name = "tgp_japan_become_shogun_decision_tutorial_highlight"
			size = { 100% 100% }
			visible = "[ObjectsEqual( GetDecision('tgp_japan_become_shogun_decision'),  Decision.Self)]"
		}


		margin_widget = {
			parentanchor = right|vcenter
			scissor = yes

			margin = { 2 2 }

			block "size_illustration" {
				size = { 100% 100% }
			}

			proportional_icon = {
				name = "illustration"
				block "illustration_possible_check" {
					visible = "[Decision.IsPossibleForPlayer]"
				}
				parentanchor = right|top
				size = { 45% 100% }
				mirror = horizontal

				block "icon_alpha" {
					alpha = 0.6
				}

				block "decision_texture_icon" {
					texture = "[Decision.GetPicture( GetPlayer.Self )]"
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}

			proportional_icon = {
				block "illustration_not_possible_check" {
					visible = "[Not(Decision.IsPossibleForPlayer)]"
				}
				parentanchor = right|top
				size = { 45% 100% }
				mirror = horizontal

				enabled = no

				alpha = 0.6

				block "decision_texture_highlight" {
					texture = "[Decision.GetPicture( GetPlayer.Self )]"
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}
		}

		# Vignette
		margin_widget = {
			parentanchor = center
			size = { 100% 100% }

			margin = { 2 2 }

			icon = {
				parentanchor = center
				size = { 100% 100% }

				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
			}
		}

		hbox = {
			margin = { 15 0 }
			margin_right = 10

			text_single = {
				name = "title"
				block "title_possible_check" {
					visible = "[Decision.IsPossibleForPlayer]"
				}
				layoutpolicy_horizontal = growing

				text = "[Decision.GetTitleForPlayer]"
				align = nobaseline
				block "default_format" {
					default_format = "#clickable"
				}
				# CfV POD: Make Decision buttons clickable even if the text has tooltips (e.g. Glossary entries)
				alwaystransparent = yes
			}

			text_single = {
				name = "title2"
				block "title2_not_possible_check" {
					visible = "[Not( Decision.IsPossibleForPlayer )]"
				}
				layoutpolicy_horizontal = growing

				text = "[Decision.GetTitleForPlayer]"
				align = nobaseline
				block "default_format" {
					default_format = "#low"
				}
				# CfV POD: Make Decision buttons clickable even if the text has tooltips (e.g. Glossary entries)
				alwaystransparent = yes
			}

			highlight_icon = {
				name = "not_possible"
				block "title_not_possible_check" {
					visible = "[Not( Decision.IsPossibleForPlayer )]"
				}
				size = { 30 30 }

				texture = "gfx/interface/icons/symbols/icon_cross.dds"
			}
		}
	}
}

types Project
{
	type hbox_project_contribution_status = hbox {

		margin = { 10 5 }
		margin_left = 5

		block "background"
		{
			background = {
				using = Background_Area_Dark
			}
		}

		hbox = {
			text_single = {
				text = "GREAT_PROJECT_REQUIRED_CONTRIBUTION_RATIO"
				align = nobaseline

				margin = { 10 5 }
			}
		}

		# cost
		block "cost_section"
		{
			vbox_great_project_cost = {
				visible = "[GreaterThan_int32( GreatProject.GetRequiredContributionCount, GreatProject.GetRequiredFundedContributionCount )]"

				margin = { 10 5 }

				blockoverride "title_visible" { visible = no }

				blockoverride "cost" {
					text = "[GreatProject.GetMandatoryContributionsCost( GetPlayer )]"
				}
			}
		}
	}

	type button_project_item = widget {
		size = { 526 180 }

		tooltip = "[GreatProject.GetType.GetGreatProjectItemDescriptionTooltip]"

		# background
		margin_widget = {
			size = { 100% 100% }
			scissor = yes

			margin = { 2 2 }

			proportional_icon = {
				name = "illustration"
				size = { 100% 100% }
				alpha = 0.6

				block "great_project_texture_icon" {
					texture = "[GreatProject.GetIllustration]"
				}
			}
		}

		# Vignette
		margin_widget = {
			parentanchor = center
			size = { 100% 100% }

			margin = { 2 2 }

			icon = {
				parentanchor = center
				size = { 100% 100% }

				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
			}
		}

		button_standard_clean = {
			onclick = "[OpenGameViewData('great_project', GreatProject.Self )]"
			size = { 100% 100% }
			name = "great_project_button"

			# info
			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 10
					margin_top = 10
					spacing = 5

					background = {
						using = Background_Area_Dark
						margin = { 3 0 }
						margin_bottom = 10

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}
					}

					highlight_icon = {
						size = { 30 30 }
						texture = "[GreatProject.GetIcon]"
					}

					text_single = {
						text = "[GreatProject.GetName]"
						align = hcenter|nobaseline

						block "default_format" {
							default_format = "#clickable"
						}
					}

					expand = {}
				}

				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 2

					# Owner portrait
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }

						vbox = {
							layoutpolicy_vertical = expanding
							spacing = 3

							expand = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_left = 10

								text_single = {
									block "can_contribute_text_visible"
									{
										visible = "[And( GreatProject.AcceptsContributionsFrom( GetPlayer ), Not( GreatProject.IsUnderConstruction ))]"
									}
									layoutpolicy_horizontal = expanding

									text = "GREAT_PROJECT_CAN_CONTRIBUTE"
									align = left
									default_format = "#glow_color:{0.1,0.1,0.1,1.0}"
								}
							}

							hbox_project_contribution_status = {
								visible = "[Not( GreatProject.IsUnderConstruction )]"

								blockoverride "contributions_source"
								{
									datamodel = "[GreatProjectItem.GetMandatoryContributions]"
								}
							}
						}

						expand = {}

						portrait_head_small = {
							name = "portrait_project_owner"
							datacontext = "[GreatProject.GetOwner]"
							visible = "[And( And( Character.IsValid, GreatProject.GetType.ShouldShowOwnerPortrait ), Not( Character.IsLocalPlayer ) )]"
						}
					}

					vbox = {
						visible = "[GreatProject.IsUnderConstruction]"
						layoutpolicy_horizontal = expanding
						spacing = 5

						background = {
							using = Background_Area_Dark

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
								mirror = vertical
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								visible = "[GreatProject.AcceptsContributionsFrom( GetPlayer )]"

								text = "GREAT_PROJECT_CAN_CONTRIBUTE"
								align = left
								default_format = "#glow_color:{0.1,0.1,0.1,1.0}"

								margin_left = 10
							}

							expand = {}

							text_single = {
								visible = "[GreatProject.IsUnderConstruction]"

								text = "GREAT_PROJECT_CONSTRUCTION_TIME_UNTIL_COMPLETION"
								align = right
								default_format = "glow_color:{0.1,0.1,0.1,1.0}"

								margin_right = 10
							}
						}

						# construction progress
						progressbar_standard = {
							name = "great_project_progressbar"
							visible = "[GreatProject.IsUnderConstruction]"
							size = { 522 15 }
							alwaystransparent = yes

							direction = horizontal

							value = "[GreatProject.GetConstructionProgress]"

							tooltip = "[GreatProject.GetConstructionEndDateDesc]"
						}
					}
				}
			}
		}
	}

	type button_available_project_item = widget {
		datacontext = "[AvailableGreatProjectItem.GetProjectType]"
		size = { 526 150 }
		name = "great_project_button"

		tooltip = "[GreatProjectType.GetGreatProjectItemDescriptionTooltip]"

		margin_widget = {
			size = { 100% 100% }
			scissor = yes

			margin = { 2 2 }

			proportional_icon = {
				name = "illustration"
				visible = "[AvailableGreatProjectItem.CanStartPlanning]"
				size = { 100% 100% }

				texture = "[GreatProjectType.GetIllustration]"
				alpha = 0.6
			}

			proportional_icon = {
				name = "illustration_disabled"
				visible = "[Not( AvailableGreatProjectItem.CanStartPlanning )]"
				size = { 100% 100% }

				enabled = no

				texture = "[GreatProjectType.GetIllustration]"
				alpha = 0.6
			}
		}

		# Vignette
		margin_widget = {
			parentanchor = center
			size = { 100% 100% }

			margin = { 2 2 }

			icon = {
				parentanchor = center
				size = { 100% 100% }

				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
			}
		}

		button_standard_clean = {
			onclick = "[OpenGameViewData('plan_great_project', GreatProjectType.Self ) ]"
			size = { 100% 100% }

			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 10
					margin_top = 10
					spacing = 5

					background = {
						using = Background_Area_Dark
						margin = { 3 0 }
						margin_bottom = 10

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}
					}

					highlight_icon = {
						size = { 30 30 }
						texture = "[GreatProjectType.GetIcon]"
					}

					text_single = {
						text = "[AvailableGreatProjectItem.GetProjectItemName]"
						align = left|nobaseline
						max_width = 490

						block "default_format" {
							default_format = "#clickable"
						}
					}

					expand = {}
				}

				expand = {}

				hbox = {
					visible = "[Not( AvailableGreatProjectItem.CanStartPlanning )]"
					layoutpolicy_horizontal = expanding
					margin = { 0 5 }
					margin_left = 10
					spacing = 5

					background = {
						using = Background_Area_Dark
					}

					highlight_icon = {
						size = { 30 30 }
						texture = "gfx/interface/icons/symbols/icon_cross.dds"
					}

					text_single = {
						text = "[AvailableGreatProjectItem.GetProjectStatus]"
						align = left|nobaseline
						max_width = 510

						block "default_format" {
							default_format = "#low"
						}
					}

					expand = {}
				}
			}
		}
	}
}

