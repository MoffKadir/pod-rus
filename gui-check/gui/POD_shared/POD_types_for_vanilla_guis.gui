# GUI elements that get inserted into vanilla GUI files
# Defined here in a separate file as to keep a low profile for WinMerge

@overlay_alpha = 0.4 # from gui\shared\coat_of_arms.gui

# Personal COA by DYLAN/AGOT
template POD_personal_coa_tooltip {
	object_tooltip_pop_out = {
		datacontext = "[DynastyHouse]"

		blockoverride "header_additions" {
			margin_right = 10
			margin_top = 8
			margin_left = -4

			pod_coa_house_small = {
				blockoverride "POD_coa_tooltip" {}
			}
		}
		blockoverride "title_text" {
			text = "PERSONAL_ARMS_COOLTIP"
		}
		blockoverride "concept_link" {
			text = [POD_personal_coa|E]
			margin_top = 7
		}
		blockoverride "extra_data" {
			pod_coa_house_huge = {
				blockoverride "POD_coa_tooltip" {}
			}
		}
	}
}

types PODVanillaTypes
{
	# Personal COA by DYLAN/AGOT
	type pod_coa_house_microscopic = widget
	{
		size = { 24 25 }
		hbox = {

			coa_house_lowborn_widget = {
				size = { 19 19 }
				blockoverride "icon_size"
				{
					size = { 14 14 }
				}
			}

			coa_house_widget = {
				size = { 24 25 }
				using = CoA_House_Defaults

				coat_of_arms_icon = {
					parentanchor = center
					size = { 18 18 }
					coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)56','(int32)56')]"
					coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)56','(int32)56')]"
					coat_of_arms_mask = "gfx/interface/coat_of_arms/house_mask.dds"

					modify_texture = {
						texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
						blend_mode = overlay
						alpha = @overlay_alpha
					}
				}

				coa_house_frame = {
					framesize = { 39 38 }
					size = { 24 24 }
					texture = "gfx/interface/coat_of_arms/house_pcoa_28.dds"
				}
			}
		}
	}

	type pod_coa_house_small = widget
	{
		size = { 64 66 }
		hbox = {
			margin = { 3 5 }

			coa_house_lowborn_widget = {
				size = { 58 56 }
				blockoverride "icon_size"
				{
					size = { 44 44 }
				}
			}

			coa_house_widget = {
				size = { 58 56 }
				using = CoA_House_Defaults

				coat_of_arms_icon = {
					parentanchor = center
					size = { 44 44 }
					coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)88','(int32)88')]"
					coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)88','(int32)88')]"
					coat_of_arms_mask = "gfx/interface/coat_of_arms/house_mask.dds"

					modify_texture = {
						texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
						blend_mode = overlay
						alpha = @overlay_alpha
					}
				}

				coa_house_frame = {
					framesize = { 58 56 }
					size = { 58 56 }
					texture = "gfx/interface/coat_of_arms/house_pcoa_44.dds"
				}
			}
		}
	}

	type pod_coa_house_medium = widget
	{
		size = { 88 91 }
		hbox = {
			margin = { 3 5 }

			coa_house_lowborn_widget = {
				size = { 82 81 }
				blockoverride "icon_size"
				{
					size = { 62 62 }
				}
			}

			coa_house_widget = {
				size = { 82 81 }
				using = CoA_House_Defaults

				coat_of_arms_icon = {
					parentanchor = center
					size = { 62 62 }
					coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)124','(int32)124')]"
					coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)124','(int32)124')]"
					coat_of_arms_mask = "gfx/interface/coat_of_arms/house_mask.dds"

					modify_texture = {
						texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
						blend_mode = overlay
						alpha = @overlay_alpha
					}
				}

				coa_house_frame = {
					framesize = { 82 81 }
					size = { 82 81 }
					texture = "gfx/interface/coat_of_arms/house_pcoa_62.dds"
				}
			}
		}
	}

	type pod_coa_house_big = widget
	{
		size = { 119 120 }
		hbox = {
			margin = { 3 5 }

			coa_house_lowborn_widget = {
				size = { 113 110 }
				blockoverride "icon_size"
				{
					size = { 86 86 }
				}
			}

			coa_house_widget = {
				size = { 113 110 }
				using = CoA_House_Defaults

				coat_of_arms_icon = {
					parentanchor = center
					size = { 86 86 }
					coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)172','(int32)172')]"
					coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)172','(int32)172')]"
					coat_of_arms_mask = "gfx/interface/coat_of_arms/house_mask.dds"

					modify_texture = {
						texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
						blend_mode = overlay
						alpha = @overlay_alpha
					}
				}

				coa_house_frame = {
					framesize = { 113 110 }
					size = { 113 110 }
					texture = "gfx/interface/coat_of_arms/house_pcoa_86.dds"
				}
			}
		}
	}

	type pod_coa_house_huge = widget
	{
		size = { 159 160 }
		hbox = {
			margin = { 3 5 }

			coa_house_lowborn_widget = {
				size = { 153 150 }
				blockoverride "icon_size"
				{
					size = { 115 115 }
				}
			}

			coa_house_widget = {
				size = { 153 150 }
				using = CoA_House_Defaults

				coat_of_arms_icon = {
					parentanchor = center
					size = { 115 115 }
					coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)230','(int32)230')]"
					coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)230','(int32)230')]"
					coat_of_arms_mask = "gfx/interface/coat_of_arms/house_mask.dds"

					modify_texture = {
						texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
						blend_mode = overlay
						alpha = @overlay_alpha
					}
				}

				coa_house_frame = {
					texture = "gfx/interface/coat_of_arms/house_pcoa_115.dds"
					framesize = { 153 150 }
					size = { 153 150 }
				}
			}
		}
	}
	
	type pod_mainmenu_letterbox_bg = widget
	{
		parentanchor = center
		size = { 100% 100% }

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 0 }
			texture_density = 2
			color = { 0.5 0.5 0.5 1.0 }
			margin = { 10 0 }
	
			modify_texture = {
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				blend_mode = overlay
			}
		}
	}
	
	type pod_mainmenu_letterbox_fg = widget
	{
		parentanchor = center
		size = { 100% 78% }

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 0 }
			texture_density = 2
			#color = { 0.6 0.6 0.6 1.0 }
			color = { 0.8 0.8 0.8 1.0 }
			margin = { 10 0 }
	
			modify_texture = {
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				blend_mode = overlay
			}
		}
	}
	
	# needs a character datacontext
	type pod_lore_buttons = widget
	{
		block "button_size" { size = { 35 35 } }

		button_normal = {
			size = { 100% 100% }
			visible = "[Not( EqualTo_string( Concatenate('POD_persistentpodlore.desc.',Character.GetHistoryId), Localize(Concatenate('POD_persistentpodlore.desc.',Character.GetHistoryId))))]"
			onclick = "[GetScriptedGui( 'trigger_persistentpodlore_gui' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Character.MakeScope ).End ) ]"
			tooltip = "gui_lore_pod_tt"
			
			highlight_icon = {
				texture = "gfx/interface/buttons/podlore_gui_button.dds"
				size = { 100% 100% }
			}
		}				
		
		button_normal = {
			size = { 100% 100% }
			visible = "[Not( EqualTo_string( Concatenate('POD_investigate.desc.',Character.GetHistoryId), Localize(Concatenate('POD_investigate.desc.',Character.GetHistoryId))))]"
			onclick = "[GetScriptedGui( 'trigger_lore_gui' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Character.MakeScope ).End ) ]"
			tooltip = "gui_lore_tt"
			
			highlight_icon = {
				texture = "gfx/interface/buttons/lore_gui_button.dds"
				size = { 100% 100% }
			}
		}
		
		button_normal = {
			size = { 100% 100% }
			visible = "[GetScriptedGui('character_has_spawnlore_gui').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
			onclick = "[GetScriptedGui( 'trigger_spawnlore_gui' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Character.MakeScope ).End ) ]"
			tooltip = "gui_lore_tt"
			
			highlight_icon = {
				texture = "gfx/interface/buttons/lore_gui_button.dds"
				size = { 100% 100% }
			}
		}	
		
		button_normal = {
			size = { 100% 100% }
			visible = "[GetScriptedGui('character_has_patronlore_gui').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
			onclick = "[GetScriptedGui( 'trigger_patronlore_gui' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Character.MakeScope ).End ) ]"
			tooltip = "gui_lore_patron_tt"
			
			highlight_icon = {
				texture = "gfx/interface/buttons/patronlore_gui_button.dds"
				size = { 100% 100% }
			}
		}
		
		button_normal = {
			size = { 100% 100% }
			visible = "[GetScriptedGui('character_has_podlore_gui').IsShown( GuiScope.SetRoot( Character.MakeScope ).End )]"
			onclick = "[GetScriptedGui( 'trigger_podlore_gui' ).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'target', Character.MakeScope ).End ) ]"
			tooltip = "gui_lore_folklore_tt"
			
			highlight_icon = {
				texture = "gfx/interface/buttons/podlore_gui_button.dds"
				size = { 100% 100% }
			}
		}
	}
	
	type pod_selected_title_map_banner = flowcontainer
	{
		parentanchor = hcenter
		allow_outside = yes
		margin_top = -6

		container = {
			name = "name_banner"

			icon = {
				size = { 100% 36 }
				block "banner_texture" {
					texture = "gfx/interface/icons/banners/banner_blue_center.dds"
				}
				spriteType = Corneredtiled
				spriteborder = { 72 0 }
				spriteborder_right = 114
				texture_density = 4
				using = Holding_Mouse_Entry
			}

			flowcontainer = {
				margin_left = 45
				ignoreinvisible = yes

				text_single = {
					name = "tutorial_highlight_capital_holding"
					snap_to_pixels = no
					margin_top = 8

					text = "[ProvinceIcon.GetTitle.GetNameNoTierNoTooltip]"
					default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
					using = Font_Type_Flavor
					fontsize = 17
				}

				widget = {
					size = { 70 33 }
					tooltip = "REALM_CAPITAL_TOOLTIP"
					visible = "[ProvinceIcon.GetCapitalIcon.IsRealmCapital]"

					icon = {
						name = "realm_capital_icon"
						parentanchor = left|vcenter
						position = { 0 1 }
						size = { 38 38 }
						framesize = { 63 63 }
						texture = "gfx/interface/icons/icon_capital.dds"
						frame = 2
					}
				}

				spacer = {
					size = { 45 33 }
					visible = "[Not(Holding.GetProvince.IsRealmCapital)]"
				}
			}

		}

		widget = {
			allow_outside = yes
			flowcontainer_unit_items = {
				allow_outside = yes
				visible = "[ProvinceIcon.HasUnits]"
			}
		}
	}

	type pod_splat_faith_filter = hbox
	{
		visible = "[Not(ReligionWindow.ShowOnlyReligionFaiths)]"
		layoutpolicy_horizontal = expanding
		margin = { 15 0 }
		margin_bottom = 5
		spacing = 5

		button_radio_label = {
			onclick = "[GetScriptedGui('POD_hide_invalid_faiths_button').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

			blockoverride "text"
			{
				text = "POD_show_only_valid_faiths"
			}
			blockoverride "radio"
			{
				frame = "[BoolTo1And2( GetScriptedGui('POD_hide_invalid_faiths_button').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End) )]"
			}
		}

		button_radio_label = {
			onclick = "[GetScriptedGui('POD_show_invalid_faiths_button').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

			blockoverride "text"
			{
				text = "POD_show_all_faiths"
			}
			blockoverride "radio"
			{
				frame = "[BoolTo1And2( GetScriptedGui('POD_show_invalid_faiths_button').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End) )]"
			}
		}
	}

	type pod_faith_doctrines = vbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 12
		margin_bottom = -10
		text_label_center = {
			layoutpolicy_horizontal = expanding
			block "text" { text = "FAITH_DOCTRINES_SPLATS" }
			default_format = "#low"
		}
		fixedgridbox = {
			block "datamodel" { datamodel = "[FaithWindow.GetGroupingHelper( 'splat' ).GetGrouping]" }
			flipdirection = yes
			addcolumn = 225
			addrow = 67
			datamodel_wrap = 2

			item = {
				widget_doctrine_item = {}
			}
		}
	}

	type pod_faith_doctrines_splat = pod_faith_doctrines
	{
		visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'splat' ).GetGrouping)]"
	}
	type pod_faith_doctrines_subsplat = pod_faith_doctrines
	{
		visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'subsplat' ).GetGrouping)]"
		blockoverride "text"      { text = "FAITH_DOCTRINES_SUBSPLATS" }
		blockoverride "datamodel" { datamodel = "[FaithWindow.GetGroupingHelper( 'subsplat' ).GetGrouping]" }
	}
	type pod_faith_doctrines_vampire = pod_faith_doctrines
	{
		visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'vampire' ).GetGrouping)]"
		blockoverride "text"      { text = "FAITH_DOCTRINES_VAMPIRIC" }
		blockoverride "datamodel" { datamodel = "[FaithWindow.GetGroupingHelper( 'vampire' ).GetGrouping]" }
	}

	type pod_custom_alert = container
	{
		button = {
			parentanchor = center
			framesize = { 144 144 }
			size = { 72 72 }
			#size = { 0 0 }

			gfxtype = buttongfx
			effectname = "NoHighlight"
			shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

			block "properties" {
				### properties needed: texture, onclick, onrightclick, tooltip
			}

			button_ignore = none
			using = tooltip_below

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_alert_solid.dds"
				blend_mode = mask
			}

			modify_texture = {
				name = "glow"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 0.2 0.2 }
			}

			### Adding animation ###
			state = {
				trigger_on_create = yes
				name = _show
				#name = "when_added"
				next = e
				position_y = 10
				duration = 0.45
				size = { 72 72 }
				using = Animation_Curve_Default
				start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"}
				# trigger_when = "[GUIAlertItem.IsAdding]"
				# on_start = "[GUIAlertItem.StartAnimation]"
				# on_start = "[GUIAlertItem.PlayShowSound]"
			}

			state = {
				name = e
				next = f
				position_y = 20
				duration = 0.45
				size = { 88 88 }
				using = Animation_Curve_Default
			}

			state = {
				name = f
				next = a
				position_y = 0
				duration = 0.45
				size = { 72 72 }
				bezier = { 0.43 0 0.2 2.2 }
				# on_finish = "[GUIAlertItem.AddingFinished]"
				# on_finish = "[GUIAlertItem.EndAnimation]"
			}

			### idle animation ###
			state = {
				#trigger_on_create = yes
				name = a
				next = b
				duration = 0
				delay = 10
				size = { 72 72 }
				position_y = 0
				# on_start = "[GUIAlertItem.StartAnimation]"
				# on_finish = "[GUIAlertItem.AddingFinished]"
				# on_finish = "[GUIAlertItem.EndAnimation]"
				using = Animation_Curve_Default
			}

			state = {
				name = b
				next = c
				duration = 0.3
				size = { 78 78 }
				scale = 1.2
				bezier = { 0 1.6 0.7 1.8 }
				position_y = 20
				# on_start = "[GUIAlertItem.StartAnimation]"
				# on_finish = "[GUIAlertItem.AddingFinished]"
				# on_finish = "[GUIAlertItem.EndAnimation]"
				using = Animation_Curve_Default
			}

			state = {
				name = c
				next = d
				duration = 0.2
				size = { 72 72 }
				scale = 0.8
				position_y = 0
				# on_start = "[GUIAlertItem.StartAnimation]"
				# on_finish = "[GUIAlertItem.AddingFinished]"
				# on_finish = "[GUIAlertItem.EndAnimation]"
				using = Animation_Curve_Default
			}

			state = {
				name = d
				duration = 0.2
				scale = 0.9
				size = { 72 72 }
				position_y = 0
				# on_start = "[GUIAlertItem.StartAnimation]"
				# on_finish = "[GUIAlertItem.AddingFinished]"
				# on_finish = "[GUIAlertItem.EndAnimation]"
				using = Animation_Curve_Default
			}

			state = {
				name = "already_added"
				duration = 0
				size = { 72 72 }
				scale = 0.9
				# trigger_when = "[GUIAlertItem.IsAdded]"
			}

			state = {
				name = _hide
				#name = "when_removed"
				duration = 0.3
				size = { 0 0 }
				# trigger_when = "[GUIAlertItem.IsRemoving]"
				# on_start = "[GUIAlertItem.StartAnimation]"
				# on_finish = "[GUIAlertItem.RemovingFinished]"
				# on_finish = "[GUIAlertItem.EndAnimation]"
			}

			#### Shimmer ####
			state = {
				trigger_on_create = yes
				name = firstshimmer
				next = shimmer
				duration = 0.2
				#scale = 0.9

				modify_texture = {
					name = "glow"
					translate_uv = { 1 -1 }
				}
			}

			state = {
				name = shimmer
				next = pause
				duration = 1.2
				#scale = 0.9
				#position = { 0 0 }

				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "glow"
					translate_uv = { -1 1 }
				}
			}

			state = {
				name = pause
				next = shimmer
				duration = 0
				delay = 5

				modify_texture = {
					name = "glow"
					translate_uv = { 1 -1 }
				}
			}

			state = {
				name = _mouse_enter
				duration = 0.05
				frame = 2
				position = { 0 10 }
				scale = 1
				start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
			}

			state = {
				name = _mouse_leave
				duration = 0.1
				frame = 1
				position = { 0 0 }
				scale = 0.9
			}

			state = {
				name = _mouse_press
				duration = 0.25
				frame = 3
				position = { 0 10 }
				scale = 1
				start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
			}

			state = {
				name = _mouse_release
				duration = 0.25
				frame = 2
				position = { 0 10 }
				scale = 1
				start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
			}
		}
	}
	
	### Bottom left HUD portrait, based on portrait_hud
	type POD_portrait_hud = portrait_button {
		name = "tutorial_highlight_bottom_left_portrait_button"
		visible = "[Not(GetVariableSystem.Exists( 'lifestyle_open' ))]"
		size = { 280 280 }

		# shaderfile = "gfx/FX/gui_painterly_portrait.shader"
		# pop_out = yes # Painterly shader override for `pop_out` property, it now means "add outline"
		# pop_out_v = 1.2 # Painterly shader override for `pop_out_v` property, it now means "outline width"
		# grayscale = no # Dead people should be painted non-gray
		
		shaderfile = "gfx/FX/jomini/gui_portrait.shader"

		gfxtype = portraitbuttongfx
		effectname = "NoHighlight"

		state = {
			name = _mouse_enter
			on_start = "[Character.OnMouseEnter]"
			scale = "[Add_float( FixedPointToFloat( EmptyScope.ScriptValue('POD_hud_portrait_scale') ), '(float)0.05' )]"
			using = Animation_Curve_Default
			duration = 0.05
		}

		state = {
			name = _mouse_leave
			on_start = "[Character.OnMouseLeave]"
			using = Animation_Curve_Default
			duration = 0.05
			scale = "[FixedPointToFloat( EmptyScope.ScriptValue('POD_hud_portrait_scale') )]"
		}

		state = {
			name = _mouse_release
			start_sound = {
				soundeffect = "event:/SFX/UI/Character/sfx_ui_character_portrait_select"
			}
		}

		onclick = "[DefaultOnCharacterClick(Character.GetID)]"
		onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
		button_ignore = none

		clicksound = "event:/SFX/UI/Character/sfx_ui_character_portrait_select"
		oversound = "event:/SFX/UI/Character/sfx_ui_character_portrait_pointer_over"
		# environment_event_corridor
		portrait_texture = "[Character.GetAnimatedPortrait('POD_environment_hud', 'camera_torso', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
		background_texture = "gfx/portraits/portrait_transparent.dds"
		texture = "gfx/portraits/portrait_transparent.dds"
		mask = "gfx/portraits/portrait_mask_blank.dds"

		highlight_icon = {
			name = "prison_bars"
			visible = "[Character.IsImprisoned]"
			visible_at_creation = no
			size = { 100% 100% }
			effectname = "NoHighlight"
			texture = "gfx/portraits/portrait_prison_shoulders.dds"
			position = { 25 0 }

			modify_texture = {
				name = "mask"
				texture = "gfx/portraits/portrait_mask_head.dds"
				spriteType = Corneredstretched
				blend_mode = alphamultiply
				rotate_uv = 180
			}
		}

		using = tooltip_es
		# tooltip_visible = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
		tooltip_visible = no

		tooltipwidget = {
			cooltip_type = {
				blockoverride "interaction_info"
				{
					text = "CHARACTER_TOOLTIP_INSTRUCTION"
				}
			}
		}

		tooltip_offset = { -10 0 }
		tooltip_verticalbehavior = slide
		tooltip_horizontalbehavior = mirror
	}
	
	type pod_lobby_splat_traits = hbox {
		vbox = {
			vbox = {
				layoutpolicy_horizontal = expanding
				name = "splat_traits"
				datamodel = "[Character.GetTraitIndices]"
				spacing = 10

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[GetTraitForIndex(int32.GetInt)]"
						visible = "[GetScriptedGui('splat_trait').IsShown(GuiScope.SetRoot(Trait.MakeScope).End)]"

						icon_trait = {}
						spacer = {
							size = { 10 5 }
						}
						text_single = {
							text = "[Trait.GetNameNoTooltip(Character.Self)]"
							using = Font_Type_Flavor
							fontsize = 24
							margin_bottom = 6
						}
						expand = {}
					}
				}
			}
			spacer = {
				size = { 10 5 }
			}
			vbox = {
				layoutpolicy_horizontal = expanding
				name = "subsplat_traits"
				datamodel = "[Character.GetTraitIndices]"
				spacing = 10

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[GetTraitForIndex(int32.GetInt)]"
						visible = "[GetScriptedGui('subsplat_trait').IsShown(GuiScope.SetRoot(Trait.MakeScope).End)]"

						icon_trait = {
							alpha = 0.75
							# blockoverride "icon_size"
							# {
							# 	size = { 35 35 }
							# }
						}
						spacer = {
							size = { 10 5 }
						}
						text_single = {
							text = "[Trait.GetNameNoTooltip(Character.Self)]"
							using = Font_Type_Flavor
							default_format = "#weak"
							fontsize = 24
							margin_bottom = 6
						}
						expand = {}
					}
				}
			}
		}
	}

	type pod_game_rule_container = vbox {
		datamodel = "[JominiGameRules.GetVisibleSettings]"
		layoutpolicy_horizontal = expanding

		item = {
			hbox = {
				layoutpolicy_horizontal = expanding
				datacontext = "[GuiGameRule.GetRule]"
				datacontext = "[GuiGameRule.GetSetting]"
				visible = "[And( Not(GameRuleSetting.HasFlag('POD_hidden_gamerule')), And( Or( Not(GameRuleSetting.HasFlag('POD_custom_gamemode')), JominiGameRules.HasRuleWithFlag('POD_show_custom_gamemodes') ), Or( Not(GameRuleSetting.HasFlag('POD_custom_fog_of_war')), JominiGameRules.HasRuleWithFlag('POD_show_custom_fog_of_war') ) ) )]"
				
				expand = {}
				
				hbox = {
					min_height = 40
					
					tooltip = "[GameRuleSetting.GetDescription]"
					#using = tooltip_se
					
					text_single = {
						text = "[GameRule.GetName]"
						max_width = 350
					}
	
					spacer = {
						size = { 20 20 }
					}
	
					widget_game_rule_option = {
						size = { 280 30 }
					}
				}
	
				spacer = {
					size = { 215 20 }
				}
			}
		}
	}
	
	type pod_interaction_option_scrollbox = scrollarea {
		visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		
		autoresizescrollarea = yes
		#layoutpolicy_horizontal = expanding
		max_height = 500
		
		scrollbarpolicy_horizontal = always_off
		
		scrollbar_vertical = {
			using = Scrollbar_Vertical
		}

		scrollwidget = {
			widget = {
				block "scrollbox_content"
				{
					debug_square = {}
				}
			}
		}
	}
	
	type pod_lifestyle_tab_scrollbox = scrollarea {
		autoresizescrollarea = yes
		#layoutpolicy_horizontal = expanding
		max_width = 1600
		
		scrollbarpolicy_vertical = always_off
		
		scrollbar_horizontal = {
			using = Scrollbar_Horizontal
		}

		scrollwidget = {
			flowcontainer = {
				block "scrollbox_content"
				{
					debug_square = {}
				}
			}
		}
	}
}