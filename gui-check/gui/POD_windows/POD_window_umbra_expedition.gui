widget = {
	name = "umbra_expedition_window"
	layer = royal_court # above the HUD, but below interaction windows and events
	size = { 100% 100% }
	visible = "[And( And( Not( IsPauseMenuShown ), IsDefaultGUIMode ), GetPlayer.IsValid)]"

	window = {
		parentanchor = center
		size = { 650 840 }
		using = Window_Background
		using = Window_Decoration_Spike
		allow_outside = yes
			
		visible = "[And(GetVariableSystem.Exists('pod_expedition_view'), GetPlayer.MakeScope.Var('umbra_map').IsSet)]"
		
		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
		}
		
		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
		}

		margin_widget = {
			name = "main_content"
			# Actual positions should be calculated against a 600x800 panel
			margin = { 25 20 }
			size = { 100% 100% }
		
			# Top Button Row
			button_undo = {
				name = "button_reload"
				position = { 510 2 }
				visible = "[InDebugMode]"
				onclick = "[GetScriptedGui('POD_umbra_expedition_reload').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				onclick = "[PdxGuiTriggerAllAnimations('set_button_position')]"
			}
					
			button_close = {
				name = "button_close"
				position = { 550 2 }
				shortcut = "close_window"
				tooltip = "CLOSE_TOOLTIP"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
				
				onclick = "[GetVariableSystem.Clear('pod_expedition_view')]"
			}

			widget = {
				name = "pod_lines_nodes"
				size = { 100% 100% }
				alwaystransparent = yes
				datamodel = "[GetPlayer.MakeScope.Var('umbra_map').GetList('lines')]"
				datacontext = "[GetScriptedGui('POD_umbra_expedition_line')]"
				item = {
					pod_umbra_expedition_line = {}
				}
			}

			widget = {
				name = "pod_umbra_nodes"
				size = { 100% 100% }
				alwaystransparent = yes
				datamodel = "[GetPlayer.MakeScope.Var('umbra_map').GetList('nodes')]"
				item = {
					pod_umbra_expedition_node = {}
				}
			}
		}

		background = {
			name = "triangle_background"
			fittype = centercrop
			texture = "gfx/interface/illustrations/spirit_world.dds"

			shaderfile = "gfx/FX/POD_shaders/POD_event_shaders.shader"
			effectname = "DeepUmbra"

			block "bg_margins"
			{
				margin = { -23 -17 }
			}

			modify_texture = {
				texture = "gfx/interface/component_tiles/tile_window_background.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 18 0 }
				texture_density = 2
			}
		}
	}
}
types UmbraExpeditionTypes
{
	type pod_umbra_expedition_node = button_normal {
		size = { 50 50 }
		visible = "[StoryGuiIsShown('POD_umbra_expedition_node')]"
		# Scale down positions by the scaling vector
		# Widgets scale up automatically so we need to apply the scaling vector here to ensure that the position of the icon is appropriately adjusted
		position = "[Multiply_CVector2f(GetScalingVector, PdxGetWidgetScreenSize(PdxGuiWidget.FindChild('positioning_helper').Self))]"
		
		enabled = "[And(Not(IsPausedByEvent), StoryGuiIsValid('POD_umbra_expedition_node'))]"

		onclick = "[StoryGuiExecute('POD_umbra_expedition_node')]"

		tooltip = "[StoryGuiBuildTooltip('POD_umbra_expedition_node')]"


		button_icon = {
			texture = "gfx/interface/buttons/button_activity_base.dds"
			size = { 64 64 }
			position = { -7 -7 }

			visible = "[StoryGuiIsShown('POD_umbra_expedition_is_current_location')]"

			onclick = "[StoryGuiExecute('POD_umbra_expedition_node')]"
		}

		highlight_icon = {
			texture = "gfx/interface/buttons/button_activity_base.dds"
			size = { 64 64 }
			position = { -7 -7 }

			visible = "[Not(StoryGuiIsShown('POD_umbra_expedition_is_current_location'))]"
		}

		highlight_icon = {
			texture = "[GetCultureInnovationType(Concatenate('umbra_', Scope.Var('type').GetFlagKey)).GetIcon]"
			size = { 50 50 }
		}

		using = POD_scaling_helper

		# Please give us a better way to create CVector2f Paradox
		widget = {
			name = "positioning_helper"
			min_width = "[UmbraScaledScopedNodeX]"
			max_width = "[UmbraScaledScopedNodeX]"
			min_height = "[UmbraScaledScopedNodeY]"
			max_height = "[UmbraScaledScopedNodeY]"
		}
	}

	type pod_umbra_expedition_line = widget
	{
		size = { 100% 100% }
		line = {
			visible = "[StoryGuiIsShown('POD_umbra_expedition_line')]"
			using = Line_Lifestyles_Unlocked
			scale = "[GetInvParentScale(PdxGuiWidget.Self)]"
			from  = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_start').Self)]"
			to    = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_end').Self)]"
		}
		line = {
			visible = "[Not(StoryGuiIsShown('POD_umbra_expedition_line'))]"
			using = Line_Lifestyles_Unavailable
			# brighten the lines to make them more visible
			color = { 2 2 2 1 }
			scale = "[GetInvParentScale(PdxGuiWidget.Self)]"
			from  = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_start').Self)]"
			to    = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.FindChild('pod_line_end').Self)]"
		}
		widget = {
			name = "pod_line_start"
			min_width = "[UmbraScaledScopedLineX1]"
			max_width = "[UmbraScaledScopedLineX1]"
			min_height = "[UmbraScaledScopedLineY1]"
			max_height = "[UmbraScaledScopedLineY1]"
		}
		widget = {
			name = "pod_line_end"
			min_width = "[UmbraScaledScopedLineX2]"
			max_width = "[UmbraScaledScopedLineX2]"
			min_height = "[UmbraScaledScopedLineY2]"
			max_height = "[UmbraScaledScopedLineY2]"
		}
	}
}
