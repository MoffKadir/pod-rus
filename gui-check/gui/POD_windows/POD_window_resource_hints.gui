widget = {
	name = "resource_hint_window"
	visible = "[And( And( Not( IsPauseMenuShown ), IsDefaultGUIMode ), GetPlayer.IsValid)]"
	layer = confirmation
	size = { 100% 100% }

	window = {
		parentanchor = center
		visible = "[GetPlayer.MakeScope.Var('resource_hint_window').IsSet]"

		using = Window_Background
		using = Window_Decoration_Spike
	
		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
			position = "[DecisionDetailView.GetDynamicPosition]"
		}
	
		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
		}

		vbox = {
			using = Window_Margins
			#layoutpolicy_horizontal = expanding
			set_parent_size_to_minimum = yes
	
			header_pattern_interaction = {
				layoutpolicy_horizontal = expanding
	
				blockoverride "header_text" {
					text = "[GetPlayer.Custom('PODHintWindow')]"
				}
	
				blockoverride "button_close"
				{
					onclick = "[PlayerGuiExecute('resource_hint_close')]"
				}
			}

			vbox = {
				using = Background_Inset
				layoutpolicy_horizontal = expanding

				resource_hints_blood = {
					visible = "[PlayerGuiIsShown('blood_hunger_hint')]"
				}

				resource_hints_glamour = {
					visible = "[PlayerGuiIsShown('glamour_hint')]"
				}
			}
		}
	}
}

types ResourceHintTypes
{
	type resource_hints_blood = resource_hints_container
	{
		# Hunt in Capital Journey (only visible for Vampires)
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[PlayerGuiIsShown('hunt_in_capital_requirements')]"

			# Journey already in progress
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[PlayerGuiIsShown('blood_hunger_hint_journey')]"

				resource_hints_text = {
					text = POD_hunger_window_hunt_in_capital_inprogress
				}
			}

			# Journey button
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not(PlayerGuiIsShown('blood_hunger_hint_journey'))]"
				ignoreinvisible = yes

				resource_hints_text = {
					text = POD_hunger_window_hunt_in_capital
				}
				
				resource_hints_spacer = {}
				
				button_journey_entry = {
					datacontext = "[GetPlayer.MakeScope.Var('hunt_in_capital_story')]"
					visible = "[PlayerGuiIsShown(Concatenate(ScopedJourneyID,'_requirements'))]"
					enabled = "[StoryGuiIsShown('POD_journey_requirements')]"
					layoutpolicy_horizontal = expanding
					
					onclick = "[StoryGuiExecute('POD_journey_detail_open')]"
					onclick = "[PlayerGuiExecute('resource_hint_close')]"
		
					down = "[StoryGuiIsValid('POD_journey_is_selected')]"
					
					tooltip = "POD_journey_GUI_tooltip"
				}
			}

			resource_hints_divider = {}
		}

		# Passive regen for Revenants/Dhampir
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[PlayerGuiIsShown('blood_hunger_hint_passive_regen')]"

			resource_hints_text = { text = POD_hunger_window_regen }

			resource_hints_divider = {}
		}

		# Herd interactions
		vbox = {
			layoutpolicy_horizontal = expanding

			# Drink from a herd member
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[PlayerGuiIsShown('blood_hunger_hint_herd_available')]"

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[GetPlayer.MakeScope.Var('suggested_herdmember').IsSet]"

					expand = {}

					portrait_head_small = {
						datacontext = "[GetPlayer.MakeScope.Var('suggested_herdmember').Char]"
						
						blockoverride "opinion_box"  { visible = no }
						blockoverride "status_icons" { visible = no }
					}

					resource_hints_spacer = {}

					vbox = {
						resource_hints_text = {
							text = POD_hunger_window_herd_drink
						}

						resource_hints_spacer = {}

						button_standard = {
							text = "POD_drink_herd"
							tooltip = "[GetPlayer.MakeScope.Var('suggested_herdmember').Char.GetPlayerInteractionTooltip('POD_drink_herd')]"
							enabled = "[GetPlayer.MakeScope.Var('suggested_herdmember').Char.IsPlayerInteractionValid('POD_drink_herd')]"
							onclick = "[GetPlayer.MakeScope.Var('suggested_herdmember').Char.OpenPlayerInteraction('POD_drink_herd')]"
							onclick = "[PlayerGuiExecute('resource_hint_close')]"
						}
					}

					expand = {}
				}

				# None of your herd members have blood left
				resource_hints_text = {
					visible = "[Not( GetPlayer.MakeScope.Var('suggested_herdmember').IsSet )]"
					text = POD_hunger_window_herd_drink_noblood
				}
			}

			# You don't have any herd members yet
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( PlayerGuiIsShown('blood_hunger_hint_herd_available') )]"

				# Herdify button
				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[PlayerGuiIsShown('blood_hunger_hint_herd_mortal')]"

					expand = {}

					hbox = {
						resource_hints_alert_button = {
							texture = "[GetImportantActionType('action_can_add_herd_alert').GetIcon]"
							#texture = "gfx/interface/icons/alerts/action_can_add_herd_alert.dds"
							onclick = "[PlayerGuiExecute('blood_hunger_hint_herd_mortal')]"
							onclick = "[PlayerGuiExecute('resource_hint_close')]"
						}
	
						resource_hints_spacer = {}
	
						resource_hints_text = {
							text = POD_hunger_window_herdify
						}

					}

					expand = {}
				}

				# No potential herd members in your court
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not( PlayerGuiIsShown('blood_hunger_hint_herd_mortal') )]"

					resource_hints_text = {
						text = POD_hunger_window_herdify_invalid
					}
				}
			}
		}

		# Prison Interactions
		vbox = {
			layoutpolicy_horizontal = expanding

			resource_hints_divider = {}
			
			resource_hints_text = {
				text = POD_hunger_window_prisoners_invalid
				visible = "[Not(PlayerGuiIsShown('resource_hint_prisoners'))]"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[PlayerGuiIsShown('resource_hint_prisoners')]"

				resource_hints_text = {
					text = POD_hunger_window_prisoners
				}
				
				resource_hints_spacer = {}

				resource_hints_prison_button = {}
			}
		}

		# Energy vessels
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[PlayerGuiIsShown('resource_hint_artifacts')]"

			resource_hints_divider = {}
			
			resource_hints_text = {
				text = POD_hunger_window_artifacts
			}
				
			resource_hints_spacer = {}

			hbox = {
				layoutpolicy_horizontal = expanding

				expand = {}

				button_standard = {
					text = "POD_store_energy_interaction"
					tooltip = "[GetPlayer.GetPlayerInteractionTooltip('POD_store_energy_interaction')]"
					enabled = "[GetPlayer.IsPlayerInteractionValid('POD_store_energy_interaction')]"
					onclick = "[GetPlayer.OpenPlayerInteraction('POD_store_energy_interaction')]"
					onclick = "[PlayerGuiExecute('resource_hint_close')]"
				}
				
				resource_hints_spacer = {}

				button_standard = {
					text = "POD_extract_energy_interaction"
					tooltip = "[GetPlayer.GetPlayerInteractionTooltip('POD_extract_energy_interaction')]"
					enabled = "[GetPlayer.IsPlayerInteractionValid('POD_extract_energy_interaction')]"
					onclick = "[GetPlayer.OpenPlayerInteraction('POD_extract_energy_interaction')]"
					onclick = "[PlayerGuiExecute('resource_hint_close')]"
				}

				expand = {}
			}
		}
	}

	type resource_hints_glamour = resource_hints_container
	{
		# Passive regen for True Fae/Changelings
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[PlayerGuiIsShown('glamour_hint_passive_regen')]"

			resource_hints_text = { text = POD_glamour_window_regen }
			resource_hints_spacer = {}
			resource_hints_text = { text = POD_glamour_window_regen_building }

			resource_hints_divider = {}
		}

		# You can gain Glamour from Dreamers
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[PlayerGuiIsShown('glamour_hint_dreamers')]"

			# You can gain Glamour from Dreamers
			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[PlayerGuiIsShown('glamour_hint_dreamers')]"

				expand = {}

				hbox = {
					resource_hints_alert_button = {
						texture = "[GetImportantActionType('action_can_add_dreamer_alert').GetIcon]"
						#texture = "gfx/interface/icons/alerts/action_can_add_herd_alert.dds"
						onclick = "[PlayerGuiExecute('glamour_hint_dreamers')]"
						onclick = "[PlayerGuiExecute('resource_hint_close')]"
					}

					resource_hints_spacer = {}

					vbox = {
						resource_hints_text = {
							max_width = 400
							text = POD_glamour_window_dreamer
						}
						resource_hints_spacer = {}
						resource_hints_text = {
							max_width = 400
							text = POD_glamour_window_dreamer_help
						}
					}

				}

				expand = {}
			}

			resource_hints_divider = {}
		}

		# Generic Glamour sources
		vbox = {
			layoutpolicy_horizontal = expanding

			# Reverie Hint (restore Glamour through schemes)
			resource_hints_text = {
				text = POD_glamour_window_reverie
			}

			resource_hints_divider = {}
			
			# Rapture decision
			button_decision_entry = {
				datacontext = "[GetDecisionWithKey('POD_fae_rapture_decision')]"
				layoutpolicy_horizontal = expanding

				onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
				onclick = "[PlayerGuiExecute('resource_hint_close')]"

				size = { -1 55 }
				blockoverride "size_illustration" { size = { 250 53 } }
			}
		}

		# Energy vessels (Glamour)
		vbox = {
			layoutpolicy_horizontal = expanding
			visible = "[And( PlayerGuiIsShown('resource_hint_artifacts'), PlayerGuiIsShown('glamour_meters_show') )]"

			resource_hints_divider = {}
			
			resource_hints_text = {
				text = POD_glamour_window_artifacts
			}
				
			resource_hints_spacer = {}

			hbox = {
				layoutpolicy_horizontal = expanding

				expand = {}

				button_standard = {
					text = "POD_store_energy_interaction"
					tooltip = "[GetPlayer.GetPlayerInteractionTooltip('POD_store_energy_interaction')]"
					enabled = "[GetPlayer.IsPlayerInteractionValid('POD_store_energy_interaction')]"
					onclick = "[GetPlayer.OpenPlayerInteraction('POD_store_energy_interaction')]"
					onclick = "[PlayerGuiExecute('resource_hint_close')]"
				}
				
				resource_hints_spacer = {}

				button_standard = {
					text = "POD_extract_energy_interaction"
					tooltip = "[GetPlayer.GetPlayerInteractionTooltip('POD_extract_energy_interaction')]"
					enabled = "[GetPlayer.IsPlayerInteractionValid('POD_extract_energy_interaction')]"
					onclick = "[GetPlayer.OpenPlayerInteraction('POD_extract_energy_interaction')]"
					onclick = "[PlayerGuiExecute('resource_hint_close')]"
				}

				expand = {}
			}
		}
	}

	### Generic types
	
	type resource_hints_container = vbox
	{
		layoutpolicy_horizontal = expanding

		#min_width = 550
		margin = { 16 16 }
		widget = { size = { 518 0 } } # 550 - 2 * margins
	}
	
	type resource_hints_spacer = widget
	{
		size = { 16 16 }
	}
	
	type resource_hints_divider = vbox
	{
		layoutpolicy_horizontal = expanding

		resource_hints_spacer = {}

		divider_light = {
			layoutpolicy_horizontal = expanding
		}

		resource_hints_spacer = {}
	}

	type resource_hints_text = text_multi
	{
		max_width = 500
		layoutpolicy_horizontal = expanding
		align = center
		autoresize = yes
		margin_bottom = 6
	}

	type resource_hints_prison_button = button_standard
	{
		text = "POD_hint_window_prison"
		onclick = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
		onclick = "[AccessCourtWindow.SetShowPrison]"
		onclick = "[PlayerGuiExecute('resource_hint_close')]"
	}

	type resource_hints_alert_button = button
	{
		framesize = { 144 144 }
		size = { 72 72 }

		gfxtype = buttongfx
		effectname = "NoHighlight"
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		button_ignore = none

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_alert_solid.dds"
			blend_mode = mask
		}

		modify_texture = {
			name = "glow"
			texture = "gfx/interface/component_effects/effect_shimmer.dds"
			blend_mode = colordodge
			translate_uv = { 0.2 0.2 }
		}

		state = {
			trigger_on_create = yes
			name = _show
			next = shimmer
			duration = 0.2

			modify_texture = {
				name = "glow"
				translate_uv = { 1 -1 }
			}
		}

		state = {
			name = shimmer
			next = pause
			duration = 1.2

			bezier = { 0 0.9 1 0.4 }

			modify_texture = {
				name = "glow"
				translate_uv = { -1 1 }
			}
		}

		state = {
			name = pause
			next = shimmer
			duration = 0
			delay = 5

			modify_texture = {
				name = "glow"
				translate_uv = { 1 -1 }
			}
		}

		state = {
			name = _mouse_enter
			duration = 0.05
			frame = 2
			start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
		}

		state = {
			name = _mouse_leave
			duration = 0.1
			frame = 1
		}

		state = {
			name = _mouse_press
			duration = 0.25
			frame = 3
			start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
		}

		state = {
			name = _mouse_release
			duration = 0.25
			frame = 2
			start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
		}
	}
}