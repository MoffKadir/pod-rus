window = {
	name = "pod_umbra_window"
	parentanchor = top|right
	layer = windows_layer
	movable = no
	
	using = Window_Size_MainTab
	
	visible = "[And(And(GetVariableSystem.HasValue('pod_sidebar', 'umbra'), Not(IsRightWindowOpen)), IsSidebarVisibilityValid)]"
	
	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'umbra_tab_choice', 'realms' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins

				##### HEADER TEXT #####
				widget_header_with_picture = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 210 }

					blockoverride "header_text" {
						text = "UMBRA"
					}

					blockoverride "size" {
						size = { 100% 228 }
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_activity.dds"

						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					blockoverride "button_close"
					{
						onclick = "[GetVariableSystem.Clear('pod_sidebar')]"
						onclick = "[GetVariableSystem.Clear('umbra_tab_choice')]"
					}

					
					

					vbox = {
						margin_top = 42
						margin_bottom = 10						
						
						
						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 12
							margin_left = 10
							margin_right = 10
							spacing = 10
							

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								text_label_center = {
									text = "UMBRA_APTITUDE_CONCEPT"
								}
								text_label_center = {
									text = "PLAYER_UMBRA_APTITUDE_MULT"
									tooltip = "[GetPlayer.MakeScope.GetScriptValueDesc('umbra_aptitude_mult')]"
								}
								text_label_center = {
									text = "UMBRA_SENSE_CONCEPT"
								}
								text_label_center = {
									text = "PLAYER_UMBRA_SENSE"
									tooltip = "[GetPlayer.MakeScope.GetScriptValueDesc('umbra_sense_value')]"
									default_format = "#P"
								}
							}
							
							
							vbox = {
								layoutpolicy_vertical = expanding
								ignoreinvisible = yes
								spacing = 3

								text_label_center = {
									text = "UMBRA_WINDOW_GAUNTLET"
								}

								hbox = {
									spacing = 5
							
									background = {
										texture = "gfx/lines/line_lifestyles_unavailable.dds"
										margin = { -8 -12 }
										tintcolor = { 0.7 0.5 0.25 1 }
									}
									
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)10' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc10"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)9' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc9"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)8' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc8"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)7' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc7"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)6' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc6"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)5' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc5"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)4' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc4"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)3' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc3"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)2' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc2"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)1' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc1"
									}
									icon = {
										visible = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)0' )]"
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_gauntlet_level'), '(CFixedPoint)0' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "gauntletdesc0"
									}
								}
							
								text_label_center = {
									text = "UMBRA_WINDOW_SHROUD"
								}

								hbox = {
									spacing = 5
							
									background = {
										texture = "gfx/lines/line_lifestyles_unavailable.dds"
										margin = { -8 -12 }
										tintcolor = { 0.7 0.5 0.25 1 }
									}
									
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)10' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc10"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)9' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc9"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)8' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc8"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)7' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc7"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)6' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc6"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)5' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc5"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)4' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc4"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)3' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc3"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)2' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc2"
									}
									icon = {
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)1' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc1"
									}
									icon = {
										visible = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)0' )]"
										enabled = "[LessThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('location_shroud_level'), '(CFixedPoint)0' )]"
										texture = "gfx/interface/icons/event_types/type_umbra.dds"
										size = { 36 36 }
										tooltip = "shrouddesc0"
									}
								}
							}
						}

						expand = {}
					}
				}
				
				hbox = {
					layoutpolicy_horizontal = expanding

					button_tab = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[GetVariableSystem.Set('umbra_tab_choice','realms')]"
						down = "[GetVariableSystem.HasValue('umbra_tab_choice', 'realms')]"

						text = "UMBRA_WINDOW_TAB_REALMS"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[GetVariableSystem.Set('umbra_tab_choice','discoveries')]"
						down = "[GetVariableSystem.HasValue('umbra_tab_choice', 'discoveries')]"

						text = "UMBRA_WINDOW_TAB_DISCOVERIES"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[GetVariableSystem.Set('umbra_tab_choice','explorers')]"
						down = "[GetVariableSystem.HasValue('umbra_tab_choice', 'explorers')]"

						text = "UMBRA_WINDOW_TAB_EXPLORERS"
					}
				}
				
				### REALMS TAB
				vbox = {
					name = "tab_realms"
					visible = "[GetVariableSystem.HasValue('umbra_tab_choice', 'realms')]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch
					
					background = {
						name = "triangle_background"
						alpha = 0.4
						fittype = start
						texture = "gfx/interface/illustrations/spirit_world.dds"
						margin = { 5 25 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						hbox = {
							name = "toggle_filters"
							layoutpolicy_horizontal = expanding
					
							button_group = {
								onclick = "[GetVariableSystem.Toggle( 'realm_with_actions_view' )]"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
								flowcontainer = {
									spacing = 5

									button_checkbox = {
										checked = "[GetVariableSystem.Exists('realm_with_actions_view')]"
									}

									text_single = {
										parentanchor = vcenter
										align = nobaseline
										default_format = "#clickable"

										text = "toggle_realm_with_actions_desc"
										alwaystransparent = yes
									}
								}
							}
						}

						hbox = {
							name = "grouped_filters"
							layoutpolicy_horizontal = expanding
						
							hbox = {
								layoutpolicy_horizontal = expanding

								spacing = 5
								
								expand = { layoutpolicy_horizontal = expanding }

								text_single = {
									text = "COURT_POSITION_CATEGORY_FILTER"
									default_format = "#medium"
									align = nobaseline
								}

								dropdown_menu_standard = {
									blockoverride "dropdown_properties"
									{
										datamodel = "[GetGlobalList('umbra_type_list')]"
									}
									blockoverride "dropdown_active_item_properties"
									{
										text = "[Localize(Concatenate('umbra_filter_', GetPlayer.MakeScope.GetVariable('umbra_filter').GetFlagKey))]"
									}
									blockoverride "dropdown_item_properties"
									{
										text = "[Localize(Concatenate('umbra_filter_', Scope.GetFlagKey))]"
										onmousehierarchyenter = "[GetScriptedGui('POD_toggle_umbra_filter').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('filter', MakeScopeFlag(Scope.GetFlagKey)).End)]"
									}
								}
							}
						}
					}
					
					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins"
						{
							margin_top = 15
							margin_bottom = 15
							margin_right = 5
						}

						blockoverride "scrollbox_content"
						{
							vbox = {
								margin = {8 8}
								spacing = 4
								ignoreinvisible = yes
								datamodel = "[GetPlayer.MakeScope.GetList('known_umbra_realms_list')]"

								item = {
									widget_umbra_realm_item = {
										visible = "[And(GetScriptedGui('POD_filter_umbra_realms').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End), Or(Not(GetVariableSystem.Exists('realm_with_actions_view')),Not(IsDataModelEmpty( Scope.Story.MakeScope.GetList('umbra_actions_list')))))]"
									}
								}
							}
						}
					}
				}
				
				### EXPEDITION TAB
				vbox = {
					name = "tab_discoveries"
					visible = "[GetVariableSystem.HasValue('umbra_tab_choice', 'discoveries')]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch
					
					background = {
						name = "triangle_background"
						alpha = 0.4
						fittype = start
						texture = "gfx/interface/illustrations/spirit_world.dds"
						margin = { 5 25 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}
					
					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins" {
							margin = { 4 14 }
						}

						blockoverride "scrollbox_content"
						{
							text_multi = {
								visible = "[Not(GetScriptedGui( 'has_umbra_discovery' ).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text = "UMBRA_WINDOW_NOT_EXPEDITION"
								default_format = "#low;italic"
								align = center

								background = {
									using = Background_Area
								}
							}
							
							vbox = {
								spacing = 10
								ignoreinvisible = yes
								
								datamodel = "[GetPlayer.MakeScope.GetList('known_umbra_realms_list')]"

								button_undo = {
									visible = "[And(GetPlayer.MakeScope.GetVariable('umbra_map').IsSet, Not(GetVariableSystem.Exists( 'pod_expedition_view' )))]"
									onclick = "[GetVariableSystem.Set('pod_expedition_view', '')]"
								}
							
								item = {
									button_umbra_discovery_item = {
										visible = "[Scope.Var('umbra_discovery_type').IsSet]"
										blockoverride "texture" { texture = "gfx/interface/illustrations/decisions/decision_misc.dds" }
									}
								}
							}
							
							expand = {}
						}
					}

					divider_light = {
					}
								
					hbox = {
						layoutpolicy_horizontal = expanding
					
						button_group = {
							visible = "[PlayerGuiIsValid('POD_has_coterie_sgui')]"
							onclick = "[PlayerGuiExecute('POD_toggle_coterie_spirit_travel')]"
							tooltip = "coterie_spirit_travel_tt"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
							flowcontainer = {
								spacing = 5

								button_checkbox = {
									checked = "[GetPlayer.MakeScope.Var('coterie_spirit_travel').IsSet]"
								}

								text_single = {
									parentanchor = vcenter
									align = nobaseline
									default_format = "#clickable"

									text = "coterie_spirit_travel_desc"
									alwaystransparent = yes
								}
							}
						}
						
						button_group = {
							visible = "[PlayerGuiIsShown('POD_toggle_physical_spirit_travel')]"
							onclick = "[PlayerGuiExecute('POD_toggle_physical_spirit_travel')]"
							tooltip = "physical_spirit_travel_tt"
							using = tooltip_se
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_checkbox"
							flowcontainer = {
								spacing = 5

								button_checkbox = {
									checked = "[GetPlayer.MakeScope.Var('physical_spirit_travel').IsSet]"
								}

								text_single = {
									parentanchor = vcenter
									align = nobaseline
									default_format = "#clickable"

									text = "physical_spirit_travel_desc"
									alwaystransparent = yes
								}
							}
						}
					}
				}
					
				### EXPLORER TAB
				vbox = {
					name = "tab_explorers"
					visible = "[GetVariableSystem.HasValue('umbra_tab_choice', 'explorers')]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch
					
					background = {
						name = "triangle_background"
						alpha = 0.4
						fittype = start
						texture = "gfx/interface/illustrations/spirit_world.dds"
						margin = { 5 25 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}
					
					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins" {
							margin = { 4 4 }
						}

						blockoverride "scrollbox_content"
						{
							text_multi = {
								visible = "[Not(GetScriptedGui( 'has_umbra_explorer' ).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text = "UMBRA_WINDOW_NOT_EXPLORER"
								default_format = "#low;italic"
								align = center

								background = {
									using = Background_Area
								}
							}
									
							vbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[GetPlayer.MakeScope.GetList('known_umbra_realms_list')]"
								ignoreinvisible = yes

								item = {
									widget_explorers_item = {
										size = { 545 90 }
										visible = "[Scope.Var('explorer').IsSet]"
										datacontext = "[Scope.Var('explorer').GetCharacter]"
									}
								}
							}
							expand = {}
						}
					}
				}
			}
		}
	}
}

window = {
	name = "potential_umbra_explorer_window"
	position = { 0 20 }
	parentanchor = center

	allow_outside = yes
	layer = top

	using = Window_Size_CharacterList
	using = Window_Background
	using = Window_Decoration_Spike

	visible = "[And(GetVariableSystem.Exists( 'potential_umbra_explorer_window_open' ),IsInGame)]"
	
	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}
	
	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}
	
	vbox = {
		using = Window_Margins

		hbox = {
			margin_bottom = -10
			layoutpolicy_horizontal = expanding

			header_pattern_interaction = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "umbra_explorer_window"
				}

				blockoverride "button_close"
				{
					onclick = "[GetVariableSystem.Toggle('potential_umbra_explorer_window_open')]"
					onclick = "[GetScriptedGui('potential_umbra_explorer_clean').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"	
				}
			}
		}
		
		vbox = {
			datacontext = "[GetPlayer.MakeScope.GetVariable('local_umbra_explorer').GetCharacter]"
			layoutpolicy_horizontal = expanding
			margin = { 15 0 }

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_right = 3

				portrait_shoulders = {}

				vbox = {
					layoutpolicy_vertical = expanding
					margin = { 10 20 }
					spacing = 2

					text_label_center = {
						text = "UMBRA_EXPLORER_WINDOW_CURRENTLY_APPOINTED"
						default_format = "#low"
					}

					text_multi = {
						layoutpolicy_horizontal = expanding
						autoresize = yes
						text = "[Character.GetUINameNoTooltip]"
						default_format = "#high"
						using = Font_Size_Medium
						min_width = 300
						max_width = 300
					}

					text_single = {
						visible = "[GetPlayer.MakeScope.GetVariable('local_umbra_explorer').IsSet]"
						layoutpolicy_horizontal = expanding
						autoresize = no
						text = "[Localize('CURRENT_EXPLORATION_PLACE')][Localize(Concatenate('umbra_realm_', Character.MakeScope.GetVariable('umbra_stationed_realm').Var('name').GetFlagKey))]"
						tooltip = "EXTENDED_RELATIONS_TOOLTIP"
					}

					expand = {}

					button_standard = {
						datacontext = "[GetScriptedGui( 'fire_umbra_explorer_choose' )]"

						text = "CONFIRM_FIRE_COUNCILLOR_ACCEPT"

						visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						tooltip = "[ScriptedGui.IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					}
				}

				vbox = {
					layoutpolicy_vertical = expanding
					margin_bottom = 28

					expand = {}

					vbox = {
						spacing = 10
						visible = "[GetPlayer.MakeScope.GetVariable('local_umbra_explorer').IsSet]"

						background = {
							using = Background_Area
							margin = { 5 0 }
							margin_bottom = 10
						}

						text_multi = {
							text = "UMBRA_APTITUDE"
							autoresize = yes
							min_width = 175
							max_width = 175
							tooltip = "umbra_aptitude_tt"
						}

						text_multi = {
							text = "UMBRA_EXPLORAITON_PROGRESS"
							autoresize = yes
							min_width = 175
							max_width = 175
						}
					}
				}
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}
		}
		
		### Character List
		vbox = {
			name = "character_list"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			spacing = 5
			
			vbox_character_list = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				blockoverride "sort_buttons" {}
				blockoverride "character_count" {}
				blockoverride "scrollbox_empty_visibility" {}

				blockoverride "container_implementation" {
					dynamicgridbox = {
						name = "characters_grid"
						datamodel = "[GetPlayer.MakeScope.GetList('potential_umbra_explorer')]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						ignoreinvisible = yes
						item = {
							widget = {
								size = { 100% 110 } 
								datacontext = "[Scope.GetCharacter]"
								
								hbox = {
									margin = { 0 5 }
									spacing = 15

									portrait_head_small = {}

									button_standard = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										framesize = { 252 80 }
										spriteType = Corneredtiled
										spriteborder = { 10 30 }
										texture = "gfx/interface/buttons/button_entry_characterlist.dds"

										block "button" {}

										character_list_arrow = {
											name = "character_list_arrow"
										}

										block "overlay" {
											using = default_character_list_overlay
										}
										
										block "button_content"
										{
											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												margin_top = 5

												vbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding

													# Name and age
													vbox = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														margin_left = 10

														text_single = {
															layoutpolicy_horizontal = expanding
															using = Font_Size_Medium
															autoresize = no
															alwaystransparent = yes

															text = "[Character.GetUINameNoTooltip]"
														}

														hbox = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding

															using = character_age_or_death_text
															blockoverride "list_layout" {}

															block "character_relation"
															{
																text_single = {
																	name = "character_relation"
																	layoutpolicy_horizontal = expanding
																	raw_text = "|  [Localize('CURRENT_EXPLORATION_PLACE')][Localize(Concatenate('umbra_realm_', Character.MakeScope.GetVariable('umbra_stationed_realm').Var('name').GetFlagKey))]"
																	tooltip = "EXTENDED_RELATIONS_TOOLTIP"
																	default_format = "#low"
																	autoresize = no
																	align = nobaseline
																	visible = "[Character.MakeScope.GetVariable('umbra_stationed_realm').IsSet]"
																	alwaystransparent = yes
																}

																expand = {
																	visible = "[Not(Character.MakeScope.GetVariable('umbra_stationed_realm').IsSet)]"
																}
															}
														}
														block "character_description_extra" {}
													}


													### BOTTOM ROW ###
													hbox = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding

														vbox = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
										
															text_single = {
																name = "aptitude"
																layoutpolicy_horizontal = expanding
																align = left|nobaseline
																margin = { 0 8 }

																text = "UMBRA_APTITUDE"
																tooltip = "umbra_aptitude_tt"
															}
														}
														vbox = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
										
															text_single = {
																name = "sense"
																layoutpolicy_horizontal = expanding
																align = left|nobaseline
																margin = { 16 8 }

																text = "UMBRA_SENSE"
																tooltip = "umbra_sense_tt"
															}
														}

														vbox = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding

															block "bottom_right_box"
															{
																hbox = {
																	layoutpolicy_horizontal = expanding
																	layoutpolicy_vertical = expanding
																	align = right|nobaseline
																	

																	expand = {}

																	button_standard = {
																		name = "assign_position"
																		datacontext = "[GetScriptedGui( 'assign_umbra_explorer_choose' )]"

																		text = "POTENTIAL_COUNCILLOR_ASSIGN"
																		default_format = "#high"
																		
																		using = tooltip_below
																		tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End)]"
																		visible = "[And(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End), Not(Character.IsGuest))]"
																		enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End)]"
																		onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End)]"
																	}

																	button_standard = {
																		name = "swap_position"
																		datacontext = "[GetScriptedGui( 'swap_umbra_explorer_choose' )]"

																		text = "POTENTIAL_COUNCILLOR_SWAP"
																		default_format = "#high"
																		
																		using = tooltip_below
																		tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End)]"
																		visible = "[And(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End), Not(Character.IsGuest))]"
																		enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End)]"
																		onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('courtier', Character.MakeScope).End)]"
																	}

																	button_standard = {
																		name = "recruit_guest"
																		visible = "[And(Character.IsPlayerInteractionShown('recruit_guest_interaction'), Character.IsGuest)]"
																		onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
																		enabled = "[Character.IsPlayerInteractionValid('recruit_guest_interaction')]"

																		text = "[Character.GetPlayerInteractionName('recruit_guest_interaction')]"

																		tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"
																		using = tooltip_below
																	}
																}
															}
														}
													}
												}
											}
										}
									}		
								}
							}
						}
					}
				}
			}
		}
	}
}

window = {
	name = "umbra_ruler_window"
	layer = middle
	parentanchor = center
	using = Window_Background
	using = Window_Decoration_Spike
	allow_outside = yes
		
	visible = "[And(Or(Not(IsObserver), GetPlayer.IsValid), GetPlayer.MakeScope.GetVariable('incarna_court').IsSet)]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}
				
	vbox = {
		datacontext = "[GetPlayer.MakeScope.GetVariable('umbra_ruler').GetCharacter]"
		spacing = 5
		set_parent_size_to_minimum = yes
		using = Window_Margins
		
		allow_outside = yes
		
		header_pattern = {
			layoutpolicy_horizontal = expanding
			blockoverride "header_text"
			{
				text = "UMBRA_WINDOW_COMMUNE"
			}

			blockoverride "button_close"
			{
				onclick = "[GetScriptedGui('umbra_commune_clean').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

			}
		}

		text_single = {
			name = "header_text"

			block "header_text" {
				raw_text = "[Character.GetNameNoTooltip]"
				default_format = "#high;bold;italic"
			}

			maximumsize = { 306 -1 }

			using = Font_Type_Flavor
			using = Font_Size_Big
			fontsize_min = 14
		}
		portrait_shoulders = {
			blockoverride "status_icons" {}
			blockoverride "opinion_box" {}
			blockoverride "coa" {}
			blockoverride "dead_icon" {}
		}
		hbox = {
			spacing = 2
			
			icon = {
				size = { 30 30 }
				texture = "gfx/interface/icons/umbra/icon_grace.dds"
			}

			flowcontainer = {
				ignoreinvisible = yes
				text_single = {
					margin_bottom = 4
					text = "[GetPlayer.MakeScope.GetVariable('incarna_court').Var('grace').GetValue|0]"
					max_width = 50
					default_format = "#high"
					using = Font_Size_Medium
				}
			}
		}
		hbox = {
			spacing = 10
			vbox = {
				layoutpolicy_vertical = expanding
				spacing = 10
				text_single = {
					raw_text = "[Localize('umbra_offer')]"

					using = Font_Type_Flavor
					using = Font_Size_Big
					fontsize_min = 14
				}
				button_umbra_grace = {
					text = "[Localize('umbra_offer_piety')]"
					datacontext = "[GetScriptedGui( 'umbra_offer_piety' )]"
				}
				button_umbra_grace = {
					text = "[Localize('umbra_offer_prestige')]"
					datacontext = "[GetScriptedGui( 'umbra_offer_prestige' )]"
				}
				expand = { layoutpolicy_vertical = expanding }
			}
			vbox = {
				layoutpolicy_vertical = expanding
				spacing = 10
				text_single = {
					text = "[Localize('umbra_request')]"

					using = Font_Type_Flavor
					using = Font_Size_Big
					fontsize_min = 14
				}
				button_umbra_grace = {
					text = "[Localize('umbra_request_perk')]"
					datacontext = "[GetScriptedGui( 'umbra_request_perk' )]"
				}
				button_umbra_grace = {
					text = "[Localize('umbra_request_army')]"
					datacontext = "[GetScriptedGui( 'umbra_request_army' )]"
				}
				button_umbra_grace = {
					text = "[Localize('umbra_request_gold')]"
					datacontext = "[GetScriptedGui( 'umbra_request_gold' )]"
				}
				expand = { layoutpolicy_vertical = expanding }
			}
		}
		expand = { layoutpolicy_vertical = expanding }
	}
}

types Umbra
{
    type button_umbra_grace = button_standard
    {
		size = { 120 30 }
		default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
		using = Font_Type_Flavor
									
		tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
    }
	
	type widget_explorers_item = widget {
		size = { 200 180 }

		vbox = {
			background = {
				using = Background_Area_With_Header
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5

				portrait_head_small = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 10

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 4

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Character.GetUINameNoTooltip]"
							using = Font_Size_Medium
							autoresize = no
							fontsize_min = 13
							align = nobaseline
							max_width = 280
						}

						expand = {}

						hbox_skills_grid_character_model = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_horizontal = expanding

							margin_top = 3

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									name = "character_relation"
									layoutpolicy_horizontal = expanding
									text = "[Localize('CURRENT_EXPLORATION_PLACE')][Localize(Concatenate('umbra_realm_', Character.MakeScope.GetVariable('umbra_stationed_realm').Var('name').GetFlagKey))]"
									tooltip = "[Localize(Concatenate(Concatenate('umbra_realm_', Character.MakeScope.GetVariable('umbra_stationed_realm').Var('name').GetFlagKey),'_desc'))]"
									default_format = "#low"
									autoresize = no
									fontsize_min = 13
									align = nobaseline
									max_width = 350
								}

								expand = {}
							}

							vbox = {
								name = "info_text"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "UMBRA_APTITUDE"
									align = nobaseline
									tooltip = "umbra_aptitude_tt"
								}

								expand = {}
							}
						}

						vbox = {
							layoutpolicy_vertical = expanding
							margin_left = 10

							button_standard = {
								datacontext = "[GetScriptedGui( 'fire_umbra_explorer' )]"

								text = "CONFIRM_FIRE_COUNCILLOR_ACCEPT"

								onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Character.MakeScope).AddScope('player', GetPlayer.MakeScope).End)]"
							}
						}
					}
					expand = {}
				}
			}
			expand = {}
		}
	}

	type widget_umbra_realm_item = widget {
		layoutpolicy_horizontal = expanding
 		size = { 537 200 }

		background = {
			using = Background_Area_Light
			margin_top = 2
		}

		background = {
			using = Background_Frame
			margin_top = 2
			margin_bottom = 2
			margin_right = -3
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			
			vbox = {
				name = "heading"
				layoutpolicy_horizontal = expanding

				margin = { 0 4 }

				background = {
					using = GenericObjectCardHeaderBackground
					using = UmbraRealmBackgroundColors
				}
				
				margin_widget = {
					name = "upper_line"
					layoutpolicy_horizontal = expanding
					size = { 0 30 }
					margin = { 16 16 }
					margin_left = 6
				
					tooltip = "umbra_realm_tooltip"
					using = tooltip_ws

					icon = {
						texture = "gfx/interface/icons/umbra/icon_umbra.dds"
						size = { 34 34 }
						parentanchor = vcenter|left
					}

					text_single = {
						text = "umbra_realm_title"
						default_format = "#high"
						using = Font_Size_Medium
						align = nobaseline

						parentanchor = vcenter|left
						position = { 38 0 }
					}

					flowcontainer = {
						visible = "[GetScriptedGui( 'umbra_explorer_enable' ).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('location', MakeScopeFlag(Scope.Var('name').GetFlagKey)).End)]"
						datacontext = "[Scope.Var('explorer').GetCharacter]"
						parentanchor = vcenter|right
						ignoreinvisible = yes
						position = {-6 0 }
						
						tooltip = "umbra_level_tt"
						using = tooltip_ne

						icon = {
							visible = "[GetScriptedGui('is_yama_trap_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
							tooltip = "UMBRA_WINDOW_YAMA_TRAP"
							using = tooltip_ne
						}
						
						icon = {
							visible = "[GetScriptedGui('is_demon_trap_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
							tooltip = "UMBRA_WINDOW_DEMON_TRAP"
							using = tooltip_ne
						}

						icon = {
							visible = "[GetScriptedGui('is_wyrm_trap_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
							tooltip = "UMBRA_WINDOW_WYRM_TRAP"
							using = tooltip_ne
						}

						icon = {
							visible = "[GetScriptedGui('is_oblivion_trap_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
							tooltip = "UMBRA_WINDOW_OBLIVION_TRAP"
							using = tooltip_ne
						}

						icon = {
							visible = "[GetScriptedGui('is_tempest_trap_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
							tooltip = "UMBRA_WINDOW_TEMPEST_TRAP"
							using = tooltip_ne
						}

						icon = {
							visible = "[GetScriptedGui('is_dangerous_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_alert.dds"
							tooltip = "UMBRA_WINDOW_DANGER"
							using = tooltip_ne
						}

						icon = {
							visible = "[GetScriptedGui('is_eventful_umbra_location').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_plus.dds"
							tooltip = "UMBRA_WINDOW_EVENT"
							using = tooltip_ne
						}

						spacer = {
							size = { 8 0 }
						}

						progressbar_standard = {
							layoutpolicy_horizontal = expanding
							parentanchor = vcenter
							size = { 150 20 }
							value = "[Scope.ScriptValue( 'umbra_realm_progress' )]"
							max = 1500
							min = 0
							
							visible = "[GetScriptedGui( 'umbra_explorer_enable' ).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('location', MakeScopeFlag(Scope.Var('name').GetFlagKey)).End)]"
							using = Progressbar_Changed_Animation

							tooltip = "umbra_level_tt"

							marker = {
								name = "current_value"
								widget = {
									icon = {
										size = { 25 15 }
										position = { -20 2 }
										texture = "gfx/interface/progressbars/progressbar_center_glow.dds"
										color = { 0.80 0.90 1 0.9 }
									}
								}
							}
						}
					}
				}
			}
				
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				background = {
					visible = "[GetScriptedGui('in_penumbra').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_noprimary.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[GetScriptedGui('in_dreaming').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_diplomacy.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[GetScriptedGui('in_deep_umbra').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_martial.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[GetScriptedGui('in_spirit_wilds').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_stewardship.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[GetScriptedGui('in_underworld').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_intrigue.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[GetScriptedGui('in_astral_reaches').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_learning.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[GetScriptedGui('in_zone').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_prowess.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					margin = { 8 4 }
					margin_bottom = 2

					vbox = {
						layoutpolicy_vertical = expanding
						visible = "[GetScriptedGui( 'umbra_explorer_enable' ).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('location', MakeScopeFlag(Scope.Var('name').GetFlagKey)).End)]"
						
						portrait_head_small = {
							datacontext = "[Scope.Var('explorer').GetCharacter]"
							blockoverride "portrait_button"
							{
								onclick = "[GetScriptedGui('potential_umbra_explorer_clean').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"	
								onclick = "[GetScriptedGui('potential_umbra_explorer_initiate').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('explorer', Character.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"	
								onclick = "[GetVariableSystem.Toggle('potential_umbra_explorer_window_open')]"
							}
							blockoverride "onclick"
							{
								button_icon = {
									parentanchor = center
									alwaystransparent = yes
									size = { 20 20 }
									position = {-5 -5}
									texture = "gfx/interface/icons/flat_icons/plus.dds"
								}
							}
						}

						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							text_multi = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 8 4 }
								autoresize = yes
								minimumsize = { 340 50 }
								maximumsize = { 440 120 }

								align = top|left|nobaseline
								text = "umbra_realm_desc"
							}

							expand = {}
						}
						expand = {}
					}
				}
				
				vbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[Scope.Var('explorer').GetCharacter]"
					visible = "[Not(IsDataModelEmpty( Scope.Story.MakeScope.GetList('umbra_actions_list')))]"
					
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 4 }
						margin_top = 0

						background = {
							using = Background_Area
							margin = { -4 -2 }
						}

						hbox = {

							layoutpolicy_horizontal = expanding

							vbox = {
								visible = "[GetScriptedGui( 'umbra_explorer_enable' ).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('location', MakeScopeFlag(Scope.Var('name').GetFlagKey)).End)]"
								layoutpolicy_vertical = expanding
								margin = { 0 3 }

								minimumsize = { 72 0  }
							}

							text_multi = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								margin = { 8 4 }
								text = "UMBRA_WINDOW_ACTION_HINT"
								align = nobaseline
							}

							expand = {}

							hbox = {
								datamodel = "[Scope.GetList('umbra_actions_list')]"
								layoutpolicy_vertical = expanding
								spacing = 8
								ignoreinvisible = yes

								item = {
									widget = {
										size = { 42 52 }

										datacontext = "[GetScriptedGui(Concatenate(Scope.GetFlagKey,'_choose'))]"
										tooltip = "umbra_action_tooltip"
										visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('explorer', Character.MakeScope).End)]"
										enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('explorer', Character.MakeScope).End)]"

										button_round = {
											parentanchor = center
											size = { 46 46 }
											gfxtype = togglepushbuttongfx
											effectname = "NoHighlight"

											upframe = 1
											downframe = 1
											uphoverframe = 2
											disableframe = 6
											
											onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('explorer', Character.MakeScope).End)]"

											button_normal = {
												name = "potential_task"
												parentanchor = center
												widgetanchor = center
												effectname = "NoHighlight"
												gfxtype = togglepushbuttongfx
												shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
												block "button_icon" {
													texture = "gfx/interface/icons/court_position_task_types/_no_task.dds"
												}
												alwaystransparent = yes
												size = { 38 38 }
											}
										}
									}
								}
							}
						}
						expand = {}
					}
				}
			}
		}
	}
	
	type button_umbra_discovery_item = container {
		button_standard = {
			size = { 540 55 }
			datacontext = "[GetScriptedGui('umbra_expedition_choose')]"

			tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
			visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
			enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
			onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
			onclick = "[GetVariableSystem.Set('pod_expedition_view', '')]"

			widget = {
				scissor = yes
				parentanchor = right|top

				block "size_illustration" {
					size = { 250 53 }
				}

				icon = {
					name = "illustration"
					parentanchor = right|top
					size = { 250 100 }

					mirror = horizontal
					block "texture" { text = "" }
					alpha = 0.7

					using = Mask_Rough_Edges

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}
			}

			hbox = {
				margin = { 20 0 }
				margin_right = 10

				text_single = {
					layoutpolicy_horizontal = growing
					name = "title"
					text = "umbra_expedition_confirm"
					visible = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
					default_format = "#clickable"
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = growing
					name = "title2"
					text = "umbra_expedition_confirm"
					visible = "[Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End))]"
					block "default_format" {
						default_format = "#low"
					}
					align = nobaseline
				}

				highlight_icon = {
					size = { 30 30 }
					name = "not_possible"
					texture = "gfx/interface/icons/symbols/icon_cross.dds"
					visible = "[Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End))]"
				}
			}
 		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			datacontext = "[GetScriptedGui('umbra_expedition_send_explorer')]"
			
			expand = {}
			
			button_round = {
				gfxtype = togglepushbuttongfx
				effectname = "NoHighlight"

				upframe = 1
				downframe = 1
				uphoverframe = 2
				disableframe = 6
				
				tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
				visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
				enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('realm', Scope.Story.MakeScope).End)]"

				button_normal = {
					parentanchor = center
					widgetanchor = center
					effectname = "NoHighlight"
					gfxtype = togglepushbuttongfx
					shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
					block "button_icon" {
						texture = "gfx/interface/icons/court_position_task_types/chronicler_espouse_legend.dds"
					}
					alwaystransparent = yes
					size = { 38 38 }
				}
			}
			
			spacer = {
				size = { 10 0 }
			}
		}
	}
}

template UmbraRealmBackgroundColors
{
	modify_texture = {
		visible = "[GetScriptedGui('in_astral_reaches').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
		using = Color_Bright_Yellow
		blend_mode = normal
	}
	modify_texture = {
		visible = "[GetScriptedGui('in_spirit_wilds').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
		using = Color_Green
		blend_mode = normal
	}
	modify_texture = {
		visible = "[GetScriptedGui('in_deep_umbra').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
		using = Color_Red
		blend_mode = normal
	}
	modify_texture = {
		visible = "[GetScriptedGui('in_underworld').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
		using = Color_Courtier_Purple
		blend_mode = normal
	}
	modify_texture = {
		visible = "[GetScriptedGui('in_dreaming').IsShown(GuiScope.SetRoot(Scope.Story.MakeScope).End)]"
		using = Color_Orange
		blend_mode = normal
	}
}
